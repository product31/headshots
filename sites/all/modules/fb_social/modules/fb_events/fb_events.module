<?php

define('FBC_EVENTS_NO_LOGIN', 0);
define('FBC_EVENTS_USER_NO_FB', 1);
define('FBC_EVENTS_NO_FBC', 2);
define('FBC_EVENTS_NO_UID', 3);
define('FBC_EVENTS_FULL_CONNECT', 4);

/**
* Given a local user id, find the facebook id.
*
* Invokes hook_fb(FB_OP_GET_FBU) in order to ask other modules what the fbu
* is. Typically, fb_user.module will answer the question.
*/
function fb_events_get_fbu($uid, $fb_app = NULL) {
  // Accept either a user object or uid passed in.
  if (is_object($uid) && ($uid->uid) && isset($uid->fbu) && $uid->fbu) {
    return $uid->fbu;
  }
  elseif (is_object($uid)) {
    $uid = $uid->uid;
  }

  if ($uid) {
    // User management is handled by another module. Use our hook to ask for mapping.
    //$fbu = fb_events_invoke(FB_OP_GET_FBU, array('uid' => $uid, 'fb' => $GLOBALS['_fb']));
    $result = db_query('SELECT network, nuid FROM {sony_connect} WHERE uid = %d', $uid);
    while ($row = db_fetch_object($result)) {
      if ($row->network == 'facebook') {
        $fbu = $row->nuid;
      }
      else {
        $fbu = NULL;
      }
    }
  }
  else {
    $fbu = NULL;
  }
  return $fbu;
}

/**
* Implement hook_menu().
*/
function fb_events_menu() {
  $items = array();
  $items['admin/sony/connect/fb_events'] = array(
    'title' => t('Facebook Events'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fb_events_configure'),
    'access arguments' => array('administer facebook events'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
* Implementation of hook_perm().
*/
function fb_events_perm() {
  return array('administer facebook events');
}

/**
* Configuration settings form
*/
function fb_events_configure() {
  $form = array();

  $form['fb_events_show_members'] = array(
    '#title' => t('Number of attendees'),
    '#description' => t('How many event attendees to show with event info - set to 0 to not show attendees at all'),
    '#type' => 'textfield',
    '#size' => 6,
    '#default_value' => variable_get('fb_events_show_members', 6)
  );
  $form['fb_events_signup_text'] = array(
    '#title' => t('Sign-up Authorization Text'),
    '#description' => t('Text to show above the fb button to grant extended permission for RSVPs'),
    '#type' => 'textfield',
    '#default_value' => variable_get('fb_events_signup_text', t('Allow @site to sign me up for events', array('@site' => variable_get('site_name', ''))))
  );
  return system_settings_form($form);
}

/**
* Implementation of hook_theme().
*/
function fb_events_theme($existing, $type, $theme, $path) {
  return array(
    'fb_events_main' => array(
    'template' => 'fb_events_main',
    'arguments' => array('event_id' => 0, 'fbuid' => 0, 'fbc_status' => FBC_EVENTS_NO_LOGIN, 'members' => array(), 'event_status' => NULL, 'perm_status' => NULL, 'event_form' => array(), 'signup_text' => '', 'total_rsvp' => NULL))
  );
}
/*
* Find out if user has authorized the app already.
*/
function fb_events_app_authorized() {
  global $user;
  $network = sony_connect_get_network('facebook');
  $token = drupal_http_request('https://graph.facebook.com/oauth/access_token?client_id='.$network['conf']['application_id'].'&client_secret='.$network['conf']['secret_key'].'&grant_type=client_credentials');
  $fbuid = fb_events_get_fbu($user->uid);
  $auth = drupal_http_request('https://graph.facebook.com/'.$fbuid.'?field=installed?'.$token->data.'');
  return $auth->data;
}

/*
* Find out if user has permission to use the app.
*/
function fb_events_allowed_permission() {
  global $user;
  $network = sony_connect_get_network('facebook');
  $token = drupal_http_request('https://graph.facebook.com/oauth/access_token?client_id='.$network['conf']['application_id'].'&client_secret='.$network['conf']['secret_key'].'&grant_type=client_credentials');
  $fbuid = fb_events_get_fbu($user->uid);
  $perms = drupal_http_request('https://graph.facebook.com/'.$fbuid.'/permission?'.$token->data.'');
  return $perms->data;
}

/**
* Implementation of hook_nodeapi().
*/
function fb_events_nodeapi(&$node, $op, $arg) {
  switch ($op) {
    case 'view':
      global $user;

      //if ($label = variable_get(FB_CONNECT_VAR_PRIMARY, NULL)) {
       // $primary_app = fb_events_get_app(array('label' => $label));
     // }

      // Check that we can create a fb api client object and
      // have an fbeid field on this node
      if (!empty($node->field_fbeid)) {
        $eid = $node->field_fbeid[0]['value'];

        if($fbuid = fb_events_get_fbu($user->uid)){
          // has this user authorised this app before?
          $is_app_user = fb_events_app_authorized();
        }
      }

      // by now we know the status of the user vis-a-vis fb
      $fbc_status = ($user->uid && $fbuid && $is_app_user) ? FBC_EVENTS_FULL_CONNECT : ($fbuid && $is_app_user ? FBC_EVENTS_NO_UID : ($fbuid ? FBC_EVENTS_NO_FBC : $user->uid ? FBC_EVENTS_USER_NO_FB : FBC_EVENTS_NO_LOGIN));

      $attending = array();
      $event_status = $perm_status = NULL;
      $event_form = array();

      // TODO: add handling for passing a numeric eid that does
      // not correspond to an existing fb event
      if ($eid && is_numeric($eid)) {
        $num_members_to_show = variable_get('fb_events_show_members', 6);

        if ($num_members_to_show) {
          $members = fb_events_get_members($eid);

          if ($members) {
            $total_rsvp = count($members->data);
            shuffle($members->data);
            $attending = array_slice($members->data, 0, variable_get('fb_events_show_members', 6));
          }
        }

        if ($fbc_status == FBC_EVENTS_FULL_CONNECT) {
          $my_status = NULL;

          // check whether the user has already authorised the app to RSVP
          // to FB events
          $has_granted_perm = fb_events_allowed_permission();

          if ($has_granted_perm) {
            //$fql = "SELECT rsvp_status FROM event_member WHERE uid = $fbuid AND eid = '$eid'";

            $network = sony_connect_get_network('facebook');
            $token = drupal_http_request('https://graph.facebook.com/oauth/access_token?client_id='.$network['conf']['application_id'].'&client_secret='.$network['conf']['secret_key'].'&grant_type=client_credentials');


            //$query = "SELECT rsvp_status FROM event_member WHERE eid=$eid AND uid=$fbuid";
            //$fql_url = "https://api.facebook.com/method/fql.query?"
            //. "query=" . urlencode($query)
            //. "&format=json"
            //. "&" . $token;
            //$fql_resp = json_decode(file_get_contents($fql_url));
            //$rsvp_status = $fql_resp[0]->rsvp_status;
            //dsm($rsvp_status, 'status');


            $my_status = json_decode(file_get_contents('https://api.facebook.com/method/fql.query?'.$token->data.'&query=SELECT%20rsvp_status%20FROM%20event_member%20WHERE%20uid%20=%20'.$fbuid.'%20AND%20eid%20=%20'.$eid.'&format=json'));

            //fb is currently returning 'unsure' from fql query, but wants 'maybe' for graph api status change

            if($my_status[0]['rsvp_status'] == 'unsure'){
              $status = 'maybe';
            }else{
              $status = $my_status[0]['rsvp_status'];
            }


            $event_form = drupal_get_form('fb_events_signup_form', $eid, $fbuid, $status);
          }
        }

        // send everything to our tpl file
        $output = theme('fb_events_main', $eid, $fbuid, $fbc_status, $attending, $my_status, $has_granted_perm, $event_form, $signup_text, $total_rsvp);

        // add the themed output to the node content array
        $node->content['fb_event'] = array(
        '#value' => $output,
        '#weight' => 100
        );
      }
    break;
  }
}

function fb_events_get_members($eid) {
  global $user;
  $network = sony_connect_get_network('facebook');
  $token = drupal_http_request('https://graph.facebook.com/oauth/access_token?client_id='.$network['conf']['application_id'].'&client_secret='.$network['conf']['secret_key'].'&grant_type=client_credentials');
  $attending = drupal_http_request('https://graph.facebook.com/'.$eid.'/attending?'.$token->data.'');
  $members = $attending->data;
  return json_decode($members);
}

function fb_events_signup_form($form_state, $eid, $fbuid, $status = NULL) {
// currently uses ajaxSubmit to submit the form
// TODO: we could possibly just make this work with built-in ahah
// Either that or forget about ajax submit, shouldn't have a dependency just for that
  $form = array(
    '#redirect' => FALSE,
    '#ajaxsubmit' => TRUE,
  );
  $form['event_status'] = array(
    '#type' => 'radios',
    '#options' => fb_events_get_status_options(),
    '#default_value' => $status,
  );
  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $eid,
  );
  $form['fbuid'] = array(
    '#type' => 'hidden',
    '#value' => $fbuid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'RSVP!',
  );
  return $form;
}

function fb_events_signup_form_submit($form, &$form_state) {
  $network = sony_connect_get_network('facebook');
  $token = drupal_http_request('https://graph.facebook.com/oauth/access_token?client_id='.$network['conf']['application_id'].'&client_secret='.$network['conf']['secret_key'].'&grant_type=client_credentials');
  $status = json_decode(drupal_http_request('https://graph.facebook.com/'.$form_state['values']['event_id'].'/'.$form_state['values']['event_status'].'?'.$token->data.'method=post'));
              //// send the RSVP


      if ($status) {
        drupal_set_message(t('RSVP sent!'), 'status');
      }
}

function fb_events_get_status_options() {
  return array('attending' => t('Attending'), 'maybe' => t('Maybe attending'), 'declined' => t('Not attending'));
}

/**
* Implementation of hook_views_api().
*/
function fb_events_views_api() {
  return array(
    'api' => '2',
  );
}